name: Server Tests

on:
  workflow_dispatch:
  pull_request:
    paths:
      - 'server/**'
    branches:
      - '**'  # Trigger on all PR branches
  pull_request_target:
    branches:
      - server  # Trigger when server is the base branch
  push:
    branches:
      - server  # Trigger on push to server branch

jobs:
  test:
    name: Run Django Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ['3.10', '3.11']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: 'server/requirements.txt'

      - name: Install system dependencies
        # While tests use sqlite (not mySQL), this is needed to safely install all required libraries
        run: |
          sudo apt-get update
          sudo apt-get install -y libmysqlclient-dev

      - name: Install Python dependencies
        working-directory: ./server
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create .env file for tests
        working-directory: ./server
        run: |
          cat > .env << EOF
          # Test environment variables
          SECRET_KEY=test-secret-key-for-ci
          DEBUG=False
          DJANGO_SETTINGS_MODULE=config.settings.test

          # Database (using SQLite for tests)
          DB_NAME=test_db
          DB_USERNAME=test
          DB_PASSWORD=test
          DB_HOSTNAME=localhost
          DB_PORT=3306

          # VectorDB
          VECTORDB_CHAT_HOST=http://localhost:8000
          VECTORDB_SCREEN_HOST=http://localhost:8001

          # AWS (mocked in tests)
          AWS_ACCESS_KEY_ID=test
          AWS_SECRET_ACCESS_KEY=test
          AWS_STORAGE_BUCKET_NAME=test-bucket
          AWS_S3_REGION_NAME=us-east-1
          EOF

      - name: Run migrations check
        working-directory: ./server
        run: |
          python manage.py makemigrations --check --dry-run --settings=config.settings.test

      - name: Run tests with coverage
        working-directory: ./server
        run: |
          pytest --cov --cov-report=xml --cov-report=term --cov-report=html --cov-fail-under=80 -v

      - name: Upload coverage reports to Codecov
        if: matrix.python-version == '3.10'
        uses: codecov/codecov-action@v4
        with:
          file: ./server/coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload coverage HTML report as artifact
        if: matrix.python-version == '3.10'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: server/htmlcov/
          retention-days: 7

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request' && matrix.python-version == '3.10'
        uses: py-cov-action/python-coverage-comment-action@v3
        with:
          GITHUB_TOKEN: ${{ github.token }}
          MINIMUM_GREEN: 90
          MINIMUM_ORANGE: 80

  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: 'server/requirements.txt'

      - name: Install dependencies
        working-directory: ./server
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Check code formatting with Black
        working-directory: ./server
        run: |
          black --check --diff .

      - name: Run Django system checks
        working-directory: ./server
        run: |
          python manage.py check --settings=config.settings.test

  security:
    name: Security Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install safety
        run: pip install safety

      - name: Check for security vulnerabilities
        working-directory: ./server
        run: |
          safety check -r requirements.txt --continue-on-error || true

  test-results-summary:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    if: always()

    steps:
      - name: Check test results
        run: |
          if [ "${{ needs.test.result }}" == "failure" ]; then
            echo "❌ Tests failed!"
            exit 1
          elif [ "${{ needs.lint.result }}" == "failure" ]; then
            echo "⚠️ Linting failed!"
            exit 1
          else
            echo "✅ All checks passed!"
          fi
