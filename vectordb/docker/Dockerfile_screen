# Stage 1: Builder Stage - Installs dependencies and compilation tools
FROM python:3.10-slim AS builder

# Set environment variables for non-interactive commands
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# Set the working directory
WORKDIR /usr/src/app

# Install dependencies needed for compiling Python packages
RUN apt-get update \
    && apt-get install -y --no-install-recommends gcc pkg-config \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements and install dependencies
# This layer is cached and re-used unless requirements.txt changes.
COPY requirements.txt .
RUN pip install --upgrade pip \
    && pip install --no-cache-dir -r requirements.txt

# Stage 2: Production Final Stage - Minimal image for running the app
FROM python:3.10-slim

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1
ENV PORT 8001

# Set the working directory
WORKDIR /usr/src/app

# Copy only the installed Python packages from the builder stage
COPY --from=builder /usr/local/lib/python3.10/site-packages /usr/local/lib/python3.10/site-packages

# Copy the entire Django project directory
COPY . .

# Expose the application port
EXPOSE 8001

# Create a startup script that handles migrations and static files
RUN echo '#!/bin/bash\n\
python manage.py migrate --noinput\n\
python manage.py collectstatic --noinput\n\
exec python -m gunicorn --bind 0.0.0.0:8001 config.wsgi\n' > /usr/src/app/start.sh && \
    chmod +x /usr/src/app/start.sh

# Define the command to run the application
CMD ["/usr/src/app/start.sh"]
